@using System.Globalization
@using DotnetMeetup.Shared.Components.CalendarPicker


@inherits StyleableBaseComponent

@attribute [StreamRendering]


<div class="container">

    <Dropdown Class="calendar-modal" ButtonCssClass="border-0" MenuCssClass="calendar-wrapper" AutoCloseBehavior="Dropdown.AutoClose.Outside">

        <DropdownButton>
            <Icon IconName="IconFontAwesome.FaCalendarWeek"
                  Color="BootstrapColor.Primary"
                  FontSize="FontSize.FS20"
                  Vendor="IconVendor.FontAwesomeLight"></Icon>
        </DropdownButton>
        <DropdownMenu>

            <div>
                <table theme="calendar" class="quickgrid @Class">

                    <caption class="caption-top px-0 mx-0">
                        <div class="calendar-select-row">
                            <div class="col-1 text-center">
                                <a @onclick="(() => IncDecMonth(-1))" class="icon-link">
                                    <Icon IconName="IconFontAwesome.FaChevronLeft" FontSize="FontSize.FS18" Vendor="IconVendor.FontAwesome"></Icon>
                                </a>
                            </div>
                            <div class="col">
                                <div class="input-group">
                                    <select @onchange="SelectYear" class="form-select">
                                        @foreach (var year in Years)
                                        {
                                            if (year.Value == SelectedYear)
                                            {
                                                <option selected value="@year.Value">@year.Text</option>
                                            }
                                            else
                                            {
                                                <option value="@year.Value">@year.Text</option>
                                            }
                                        }
                                    </select>
                                    <select @onchange="SelectMonth" class="form-select">
                                        @foreach (var month in Months)
                                        {
                                            if (SelectedMonth.Month == month.Value.Month)
                                            {
                                                <option selected value="@month.Value">@month.Text</option>
                                            }
                                            else
                                            {
                                                <option value="@month.Value">@month.Text</option>
                                            }
                                        }

                                    </select>
                                </div>
                            </div>
                            <div class="col-1 text-center">
                                <a @onclick="(() => IncDecMonth(1))" class="icon-link">
                                    <Icon IconName="IconFontAwesome.FaChevronRight" FontSize="FontSize.FS18" Vendor="IconVendor.FontAwesome"></Icon>
                                </a>
                            </div>
                        </div>
                    </caption>
                    <thead>
                        <tr>
                            <th> Sun </th>
                            <th> Mon </th>
                            <th> Tue </th>
                            <th> Wed </th>
                            <th> Thu </th>
                            <th> Fri </th>
                            <th> Sat </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var context in Weeks)
                        {
                            <tr>
                                <td>
                                    <a class="calendar-link" @onclick="(async() => await SelectDateAsync(context.Days[0]))">
                                        <div style="@(context.Days[0].Colors.ToCss())">
                                            @(context.Days[0].Date.Day)
                                        </div>
                                    </a>
                                </td>
                                <td>
                                    <a class="calendar-link" @onclick="(async() => await SelectDateAsync(context.Days[1]))">

                                        <div style="@(context.Days[1].Colors.ToCss())">
                                            @(context.Days[1].Date.Day)
                                        </div>
                                    </a>
                                </td>
                                <td>
                                    <a class="calendar-link" @onclick="(async() => await SelectDateAsync(context.Days[2]))">
                                        <div style="@(context.Days[2].Colors.ToCss())">
                                            @(context.Days[2].Date.Day)
                                        </div>
                                    </a>
                                </td>
                                <td>
                                    <a class="calendar-link" @onclick="(async() => await SelectDateAsync(context.Days[3]))">
                                        <div style="@(context.Days[3].Colors.ToCss())">
                                            @(context.Days[3].Date.Day)
                                        </div>
                                    </a>
                                </td>
                                <td>
                                    <a class="calendar-link" @onclick="(async() => await SelectDateAsync(context.Days[4]))">
                                        <div style="@(context.Days[4].Colors.ToCss())">
                                            @(context.Days[4].Date.Day)
                                        </div>
                                    </a>
                                </td>
                                <td>
                                    <a class="calendar-link" @onclick="(async() => await SelectDateAsync(context.Days[5]))">
                                        <div style="@(context.Days[5].Colors.ToCss())">
                                            @(context.Days[5].Date.Day)
                                        </div>
                                    </a>
                                </td>
                                <td>
                                    <a class="calendar-link" @onclick="(async() => await SelectDateAsync(context.Days[6]))">
                                        <div style="@(context.Days[6].Colors.ToCss())" class="@(context.Days[6].Colors.HasFlag(CalendarDayColor.Selected)?"selected text-bg-selected":"")">
                                            @(context.Days[6].Date.Day)
                                        </div>
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </DropdownMenu>
    </Dropdown>
</div>

@code {

    #region Parameters
    [Parameter]
    public CalendarDay? SelectedDate { get; set; }

    [Parameter]
    public EventCallback<CalendarDay> SelectedDateChanged { get; set; }

    #endregion

    #region Public
    public List<CalendarWeek> Weeks { get; set; } = [];

    public List<SelectListItem<DateTime>> Months { get; set; } = new();

    public List<SelectListItem<int>> Years { get; set; } = [];

    public struct SelectListItem<T>
    {
        public string Text { get; set; }
        public T Value { get; set; }
    }

    public int SelectedYear { get; set; }

    public DateTime SelectedMonth { get; set; }
    #endregion

    protected override async Task OnInitializedAsync()
    {
        // fill month select
        for (int i = 1; i < 12; i++)
        {
            DateTime currentMonth = new(DateTime.Today.Year, i, 1);
            SelectListItem<DateTime> monthItem = new() { Text = currentMonth.ToString("MMM"), Value = currentMonth };
            Months.Add(monthItem);
        }

        // fill year select
        int currentYear = 2000;
        for (int i = 1970; i < 2050; i++)
        {
            Years.Add(new() { Text = $"{currentYear}", Value = currentYear });
            currentYear += 1;
        }
        SelectedDate ??= new() { Date = DateTime.Today, Colors = CalendarDayColor.Selected };
        SelectedYear = SelectedDate.Date.Year;
        SelectedMonth = SelectedDate.Date;
        FillCalendar(SelectedDate.Date);
        await base.OnInitializedAsync();
    }

    private void FillCalendar(DateTime monthDate)
    {
        int daysInMonth = DateTime.DaysInMonth(monthDate.Year, monthDate.Month);
        DateTime firstOfMonth = new(monthDate.Year, monthDate.Month, 1);
        var offset = DayOfWeek.Sunday - firstOfMonth.DayOfWeek;
        daysInMonth -= offset;
        DateTime current = firstOfMonth.AddDays(offset);

        CalendarWeek week = new();
        Weeks.Clear();

        for (int i = 0; i < daysInMonth; i++)
        {
            double div = i % 7;
            if (i == 0 || div == 0)
            {
                week = new();
                Weeks.Add(week);
            }
            CalendarDay day = new()
                {
                    Date = current
                };

            if (SelectedDate is not null && SelectedDate.HasDate && SelectedDate.Date == current)
            {
                day.Colors |= CalendarDayColor.Selected;
            }
            week.Days = week.Days.Append(day).ToArray();
            current = current.AddDays(1);
        }
        int weekLength = Weeks[^1].Days.Length;
        int missingDates = 7 - weekLength;
        for (int i = weekLength; i < 7; i++)
        {
            Weeks[^1].Days = Weeks[^1].Days.Append(new() { Date = current }).ToArray();
            current = current.AddDays(1);
        }
    }

    private async Task SelectDateAsync(CalendarDay selected)
    {
        // remove selected color from current selected day
        SelectedDate!.Colors ^= CalendarDayColor.Selected;


        // add selected color to newly selected day
        selected.Colors |= CalendarDayColor.Selected;
        SelectedDate = selected;
        await SelectedDateChanged.InvokeAsync(SelectedDate);
        FillCalendar(SelectedDate.Date);
        await InvokeAsync(StateHasChanged);
    }

    private void SelectYear(ChangeEventArgs args)
    {
        SelectedYear = Convert.ToInt32(args.Value);
        DateTime yearDate = new(SelectedYear, SelectedMonth.Month, 1);
        FillCalendar(yearDate);
    }

    private void SelectMonth(ChangeEventArgs args)
    {
        string dateString = args.Value?.ToString() ?? "";
        DateTime monthDate = DateTime.Parse(dateString);
        SelectedMonth = new(SelectedYear, monthDate.Month, 1);
        FillCalendar(SelectedMonth);
    }

    private void IncDecMonth(int incriment)
    {
        SelectedMonth = SelectedMonth.AddMonths(incriment);
        FillCalendar(SelectedMonth);
    }
}
